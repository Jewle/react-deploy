{"version":3,"sources":["services/swapi.service.js","constants/url.container.js","services/HTTP.Service.js","components/hoc-helpers/Hoc.data.js","components/header/index.js","components/header/header.js","components/spinner/spiner.js","components/simple-error/simple-error.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/item-list/index.js","components/item-list/item-list.js","components/row/row.component.js","components/person-details/person-details.js","components/item-details/item-details.component.js","components/app/index.js","components/app/app.js","index.js"],"names":["SwapiService","getAllPeople","a","get","rawPeople","results","map","_transformPerson","getPerson","id","rawPerson","getAllPlanets","rawPlanets","_transformPlanet","getPlanet","rawPlanet","getAllStarShips","rawStarShips","_transformStarShip","getAllStarShip","rawStarShip","getPersonImage","getStarShipImage","planet","name","_extractId","url","population","diameter","rotationPeriod","rotation_period","starShip","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","person","gender","birthYear","birth_year","eyeColor","eye_color","match","this","content","fetch","res","ok","Error","json","hocData","View","getData","props","console","log","HOC","state","people","isLoaded","hasErrors","updateItem","setState","onSelectPerson","data","Component","Header","className","href","Spinner","SimpleError","role","RandomPlanet","interval","swapi","updatePlanet","Math","floor","random","setInterval","clearInterval","PlanetView","Fragment","src","ItemList","listView","i","onClick","Row","left","right","Record","item","field","label","ItemDetails","fetchItem","prevProps","prevState","snapshot","personId","itemId","getImage","React","Children","children","child","index","cloneElement","App","swapiService","showRandomPlanet","selectedPerson","planetList","renderItem","toggleRandomPlanet","personList","personDetails","starshipDetails","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1527b039.chunk.js","sourcesContent":["import {HTTPService} from \"./HTTP.Service\";\r\nimport {SWAPI} from \"../constants/url.container\";\r\n\r\n\r\nexport default class SwapiService extends HTTPService{\r\n    constructor(){\r\n        super(SWAPI)\r\n    }\r\n\r\n\r\n   getAllPeople = async ()=>{\r\n        const rawPeople = (await this.get(`/people/`)).results\r\n        return rawPeople.map(this._transformPerson)\r\n    }\r\n    getPerson = async (id)=>{\r\n        const rawPerson = await this.get(`/people/${id}`)\r\n        return this._transformPerson(rawPerson)\r\n    }\r\n\r\n    getAllPlanets = async ()=>{\r\n        const rawPlanets = (await this.get(`/planets/`)).results\r\n        return rawPlanets.map(this._transformPlanet)\r\n    }\r\n\r\n    getPlanet = async (id)=>{\r\n        const rawPlanet = await this.get(`/planets/${id}`)\r\n        return this._transformPlanet(rawPlanet)\r\n    }\r\n\r\n    getAllStarShips = async ()=>{\r\n        const rawStarShips = (await this.get(`/starships/`)).results\r\n        return rawStarShips.map(this._transformStarShip)\r\n    }\r\n     getAllStarShip = async (id)=>{\r\n        const rawStarShip = await this.get(`/starships/${id}`)\r\n        return this._transformStarShip(rawStarShip)\r\n    }\r\n    getPersonImage =  (id)=>{\r\n        return  `https://starwars-visualguide.com/assets/img/characters/${id||1}.jpg`\r\n    }\r\n    getStarShipImage = (id)=>{\r\n        return `https://starwars-visualguide.com/assets/img/starships/${id || 5}.jpg`\r\n    }\r\n    _extractId(url){\r\n        const rgxp = /\\/([0-9]*)\\/$/\r\n        return url.match(rgxp)[1]\r\n\r\n    }\r\n    _transformPlanet = (planet)=>{\r\n        const transformedPlanet = {\r\n            name:planet.name,\r\n            id:this._extractId(planet.url),\r\n            population:planet.population,\r\n            diameter:planet.diameter,\r\n            rotationPeriod: planet.rotation_period\r\n        }\r\n        return transformedPlanet\r\n    }\r\n    _transformStarShip = (starShip)=>{\r\n        return {\r\n            id:this._extractId(starShip.url),\r\n            model:starShip.model,\r\n            manufacturer:starShip.manufacturer,\r\n            costInCredits:starShip.costInCredits,\r\n            length:starShip.length,\r\n            crew:starShip.crew,\r\n            passengers:starShip.passengers,\r\n            cargoCapacity:starShip.cargoCapacity\r\n        }\r\n    }\r\n    _transformPerson = (person)=>{\r\n        return {\r\n            id:this._extractId(person.url),\r\n            name:person.name,\r\n            gender:person.gender,\r\n            birthYear:person.birth_year,\r\n            eyeColor:person.eye_color\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","export const SWAPI = 'https://swapi.dev/api'\r\n","\r\nexport class HTTPService {\r\n    constructor(url){\r\n        this.url = url\r\n    }\r\n\r\n    async get(content) {\r\n        const res = await fetch(this.url+content)\r\n\r\n        if(!res.ok){\r\n            throw new Error('OOPS. Some problems with fetch ' + this.url+content+'. SWAPI.SERvice')\r\n        }\r\n\r\n        return await res.json()\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nfunction hocData(View, getData,props) {\r\n    console.log(View,getData,props)\r\n    class HOC  extends Component{\r\n        state = {\r\n            people:{},\r\n            isLoaded:false,\r\n            hasErrors:false\r\n        }\r\n        componentDidMount() {\r\n            this.updateItem()\r\n        }\r\n\r\n        async updateItem() {\r\n\r\n            try {\r\n                const people = await getData()\r\n                this.setState({isLoaded: true, people})\r\n\r\n            } catch (e) {\r\n                console.log(e)\r\n                this.setState({hasErrors: true})\r\n            }\r\n        }\r\n\r\n        render() {\r\n            const {onSelectPerson} = props\r\n            const data = {...this.state,onSelectPerson}\r\n            return <View {...data} />\r\n        }\r\n    }\r\n    return <HOC/>\r\n}\r\n\r\nexport default hocData\r\n","import Header from './header';\n\nexport default Header;","import React from 'react';\n\nimport './header.css';\n\nconst Header = () => {\n  return (\n    <div className=\"header d-flex\">\n      <h3>\n        <a href=\"#\">\n          Star DB\n        </a>\n      </h3>\n      <ul className=\"d-flex\">\n        <li>\n          <a href=\"#\">People</a>\n        </li>\n        <li>\n          <a href=\"#\">Planets</a>\n        </li>\n        <li>\n          <a href=\"#\">Starships</a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Header;","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport './spinner.css'\r\n\r\nexport  const Spinner = ()=>{\r\n    return (\r\n      <div className='container'>\r\n          <div className = \"loadingio-spinner-ellipsis-i2s4ewp7zss\" >\r\n              <div className = \"ldio-nz4qbhncnrh\">\r\n                  <div></div><div></div>\r\n                  <div></div><div></div><div></div>\r\n              </div>\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport const SimpleError = () =>{\r\n    return (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n            Something went wrong\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\n\nimport './random-planet.css';\nimport SwapiService from \"../../services/swapi.service\";\nimport {Spinner} from \"../spinner/spiner\";\nimport {SimpleError} from \"../simple-error/simple-error\";\n\nexport default class RandomPlanet extends Component {\n    interval = null\n  state = {\n    planet:{},\n    isLoaded:false,\n    hasErrors:false\n  }\n\n  swapi = new SwapiService()\n\n\n  componentDidMount() {\n        this.updatePlanet()\n      this.interval = setInterval(this.updatePlanet,10000)\n  }\n  componentWillUnmount() {\n      clearInterval(this.interval)\n  }\n\n//fix image\nupdatePlanet = async ()=>{\n    try{\n        this.setState({isLoaded:false})\n        const id = Math.floor(Math.random()*25)+2\n        const planet = await this.swapi.getPlanet(id)\n        this.setState({planet,isLoaded:true})\n    }\n    catch (e) {\n        this.setState({hasErrors:true, isLoaded:true})\n    }\n  }\n  render() {\n    const {isLoaded, planet , hasErrors} = this.state\n    const content = isLoaded? <PlanetView planet={planet}/> : <Spinner/>\n\n    return (\n      <div className=\"random-planet jumbotron rounded\">\n          {hasErrors ? <SimpleError/> : content}\n      </div>\n\n    );\n  }\n}\n\n\nconst PlanetView = ({planet})=>{\n    const {diameter,population,rotationPeriod,name,id} = planet\n    return (\n        <React.Fragment>\n            <img className=\"planet-image\"\n                 src={`https://starwars-visualguide.com/assets/img/planets/${id||'2'}.jpg`} />\n            <div>\n                <h4>{name}</h4>\n                <ul className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item\">\n                        <span className=\"term\">Population</span>\n                        <span>{population}</span>\n                    </li>\n                    <li className=\"list-group-item\">\n                        <span className=\"term\">Rotation Period</span>\n                        <span>{rotationPeriod}</span>\n                    </li>\n                    <li className=\"list-group-item\">\n                        <span className=\"term\">Diameter</span>\n                        <span>{diameter}</span>\n                    </li>\n                </ul>\n            </div>\n        </React.Fragment>\n    )\n}\n","import RandomPlanet from './random-planet';\n\nexport default RandomPlanet;\n","import ItemList from './item-list';\n\nexport default ItemList;\n","import React, { Component } from 'react';\n\nimport './item-list.css';\n\nimport {Spinner} from \"../spinner/spiner\";\nimport {SimpleError} from \"../simple-error/simple-error\";\n\nclass ItemList extends Component {\n    listView = (people)=>{\n        return (\n            <ul className=\"item-list list-group\">\n                {people.map(i=>{\n                    const {name} = i\n                     return (<li key={i.id}\n                        className=\"list-group-item\"\n                        onClick={()=>this.props.onSelectPerson(i.id)}>\n                        {name}\n                    </li>)}\n                )}\n            </ul>\n        )\n    }\n    render() {\n        const {isLoaded, people , hasErrors} = this.props\n        const content = isLoaded? this.listView(people) : <Spinner/>\n\n        return hasErrors ? <SimpleError/> : content\n\n  }\n}\nexport default ItemList\n\n\n","import React from \"react\";\r\n\r\nconst Row = ({left,right})=>{\r\n    return (\r\n        <div className=\"row mb2\">\r\n            <div className=\"col-md-6\">\r\n                {left}\r\n                <br/>\r\n                <br/>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                {right}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Row\r\n","import React, { Component } from 'react';\n\nimport './person-details.css';\nimport SwapiService from \"../../services/swapi.service\";\n\nexport default class PersonDetails extends Component {\n\n  state = {\n    person:{},\n    isLoaded:false\n  }\n\n  async fetchItem(id){\n   const person = await this.props.getData(id)\n   this.setState({person})\n  }\n\n  componentDidMount() {\n    this.fetchItem(1)\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n   if (prevProps.personId!== this.props.personId){\n     const personId  = this.props.personId || 3\n     this.fetchItem(personId)\n   }\n  }\n\n\n  render() {\n    const {id,name,gender,birthYear,eyeColor} = this.state.person\n\n    return (\n\n      <div className=\"person-details card\">\n        <img className=\"person-image\"\n          src={`https://starwars-visualguide.com/assets/img/characters/${id||1}.jpg`} />\n\n        <div className=\"card-body\">\n          <h4>{name}</h4>\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">\n              <span className=\"term\">Gender</span>\n              <span>{gender}</span>\n            </li>\n            <li className=\"list-group-item\">\n              <span className=\"term\">Birth Year</span>\n              <span>{birthYear}</span>\n            </li>\n            <li className=\"list-group-item\">\n              <span className=\"term\">Eye Color</span>\n              <span>{eyeColor}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nimport './item-details.css';\r\n\r\n\r\nconst Record = ({item,field,label}) => {\r\n    return (\r\n        <li className=\"list-group-item\">\r\n            <span className=\"term\">{label}</span>\r\n            <span>{item[field]}</span>\r\n        </li>\r\n    )\r\n}\r\nexport {\r\n    Record\r\n}\r\n\r\nexport default class ItemDetails extends Component {\r\n\r\n    state = {\r\n        item:{},\r\n        isLoaded:false\r\n    }\r\n    async fetchItem(id){\r\n\r\n        const item = await this.props.getData(id)\r\n        this.setState({item})\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('mounted')\r\n        this.fetchItem(5)\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.personId!== this.props.personId){\r\n            const itemId  = this.props.personId || 3\r\n            this.fetchItem(itemId)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {item} = this.state\r\n        const {getImage} = this.props\r\n\r\n\r\n        return (\r\n\r\n            <div className=\"person-details card\">\r\n                <img className=\"person-image\"\r\n                     src={getImage(item.id)} />\r\n\r\n                <div className=\"card-body\">\r\n                    <h4>{item.name}</h4>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {/*Клонируем jsx элементы, добавляя свойство item*/}\r\n                        {React.Children.map(this.props.children, (child, index)=>{\r\n                            child = React.cloneElement(child, {item})\r\n                            return child\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import App from './app';\n\nexport default App;\n","import React, {Component} from 'react';\nimport hocData from '../hoc-helpers/Hoc.data'\nimport Header from '../header';\nimport RandomPlanet from '../random-planet';\nimport ItemList from '../item-list';\nimport PersonDetails from '../person-details';\nimport './app.css';\nimport SwapiService from \"../../services/swapi.service\";\nimport Row from \"../row/row.component\";\nimport ItemDetails, {Record} from \"../item-details/item-details.component\";\n\n\n\nexport class App extends Component{\n    swapiService = new SwapiService()\n    state = {\n        showRandomPlanet:true,\n        selectedPerson:1\n    }\n    onSelectPerson = (id)=>{\n        this.setState({\n            selectedPerson:id\n        })\n    }\n    planetList =(<ItemList\n        getData={this.swapiService.getAllPlanets}\n        renderItem={(item)=>item.name + `( ${item.diameter})`} />)\n\n    toggleRandomPlanet = ()=>{\n    this.setState(state=>{\n        return {...state, showRandomPlanet: !state.showRandomPlanet}\n    })\n}\n  render () {\n     const {showRandomPlanet} = this.state\n      const  personList  = hocData(ItemList,this.swapiService.getAllPeople, {onSelectPerson: this.onSelectPerson})\n\n     const personDetails =(\n         <ItemDetails getData={this.swapiService.getPerson}\n                      personId={this.state.selectedPerson}\n                      getImage={this.swapiService.getPersonImage}>\n             <Record field = \"gender\" label=\"Gender\"/>\n             <Record field=\"eyeColor\" label=\"Eye color\"/>\n\n         </ItemDetails>\n          )\n\n      const starshipDetails =(\n          <ItemDetails getImage={this.swapiService.getStarShipImage}\n                       getData = {this.swapiService.getAllStarShip}>\n\n              <Record field = \"model\" label=\"Model\"/>\n              <Record field=\"length\" label=\"Length\"/>\n              <Record field=\"costInCredits\" label=\"Cost\"/>\n          </ItemDetails>\n\n          )\n\n      return (\n          <div>\n              <Header />\n              { showRandomPlanet ? <RandomPlanet/> : null}\n              <button type=\"button\" onClick={this.toggleRandomPlanet} className=\"btn btn-warning\">Toggle</button>\n              <Row left = {starshipDetails} right={personDetails} />\n              {personList}\n              </div>\n\n      );\n  }\n};\n\nexport default App;\n\n\n","\r\nimport SwapiService from \"./services/swapi.service\";\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\n\r\nReactDOM.render(<App />,\r\n    document.getElementById('root'));\r\n"],"sourceRoot":""}